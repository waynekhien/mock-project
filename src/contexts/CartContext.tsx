import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { cartsApi } from '../services/api';

// Interface cho CartItem - th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa s·∫£n ph·∫©m trong gi·ªè h√†ng
export interface CartItem {
  id: string;
  productId: string;
  name: string;
  price: number;
  originalPrice?: number;
  image?: string;
  description?: string;
  category?: string;
  brand?: string;
  quantity: number;
  userId: string;
  addedAt?: string;
}

// Interface cho CartContext
interface CartContextType {
  items: CartItem[];
  totalItems: number;
  totalPrice: number;
  loading: boolean;
  addToCart: (product: Omit<CartItem, 'id' | 'quantity' | 'userId' | 'addedAt'>, quantity?: number) => Promise<void>;
  removeFromCart: (id: string) => Promise<void>;
  updateQuantity: (id: string, quantity: number) => Promise<void>;
  clearCart: () => Promise<void>;
  refreshCart: () => Promise<void>;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [items, setItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(false);
  const { user, isAuthenticated } = useAuth();

  // T√≠nh to√°n t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn
  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API th√†nh CartItem
  const convertApiToCartItem = (apiItem: any): CartItem => {
    console.log('üîÑ Converting API item:', apiItem);

    // N·∫øu API tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß th√¥ng tin
    if (apiItem.name && apiItem.price && apiItem.productId) {
      console.log('‚úÖ API returned complete data');
      return {
        id: apiItem.id?.toString() || `temp_${Date.now()}`,
        productId: apiItem.productId,
        name: apiItem.name,
        price: apiItem.price,
        originalPrice: apiItem.originalPrice || apiItem.price,
        image: apiItem.image || '',
        description: apiItem.description || '',
        category: apiItem.category || '',
        brand: apiItem.brand || '',
        quantity: apiItem.quantity || 1,
        userId: apiItem.userId || user?.id.toString() || '',
        addedAt: apiItem.addedAt || new Date().toISOString()
      };
    }

    // N·∫øu API ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu t·ªëi thi·ªÉu, t√¨m th√¥ng tin t·ª´ localStorage
    console.log('‚ö†Ô∏è API returned incomplete data, searching localStorage...');
    console.log('üîç Looking for item with id:', apiItem.id);
    console.log('üîç Current user id:', user?.id);
    
    try {
      // T√¨m trong localStorage backup
      const backupKey = `cart_backup_${user?.id}`;
      console.log('üîç Searching backup key:', backupKey);
      
      const backupData = localStorage.getItem(backupKey);
      console.log('üîç Backup data found:', !!backupData);
      
      if (backupData) {
        const backupItems: CartItem[] = JSON.parse(backupData);
        console.log('üîç Backup items:', backupItems);
        
        const matchingItem = backupItems.find(item => {
          console.log('üîç Comparing:', item.id, 'vs', apiItem.id?.toString());
          return item.id === apiItem.id?.toString();
        });
        
        if (matchingItem) {
          console.log('‚úÖ Found in backup:', matchingItem);
          return {
            ...matchingItem,
            quantity: apiItem.quantity || matchingItem.quantity
          };
        } else {
          console.log('‚ùå No matching item found in backup');
        }
      }

      // T√¨m trong localStorage books ho·∫∑c products
      console.log('üîç Searching in localStorage...');
      
      // Th·ª≠ c·∫£ 2 keys: books v√† products  
      let books = JSON.parse(localStorage.getItem('books') || '[]');
      if (books.length === 0) {
        books = JSON.parse(localStorage.getItem('products') || '[]');
        console.log('üîç Using products key, found:', books.length);
      } else {
        console.log('üîç Using books key, found:', books.length);
      }
      
      const book = books.find((b: any) => {
        const matches = b.id?.toString() === apiItem.productId?.toString() ||
                       b.id?.toString() === apiItem.id?.toString();
        console.log('üîç Book', b.id, 'matches:', matches);
        return matches;
      });
      
      if (book) {
        console.log('‚úÖ Found book in localStorage:', book);
        return {
          id: apiItem.id?.toString() || `temp_${Date.now()}`,
          productId: book.id?.toString() || '',
          name: book.name || book.title || 'S·∫£n ph·∫©m kh√¥ng r√µ',
          price: book.current_seller?.price || book.list_price || book.price || 0,
          originalPrice: book.list_price || book.price || 0,
          image: book.book_cover || book.image || (book.images?.[0]?.thumbnail_url) || '',
          description: book.short_description || book.description || '',
          category: book.categories?.name || 'S√°ch',
          brand: book.authors?.[0]?.name || book.current_seller?.name || 'Kh√¥ng r√µ',
          quantity: apiItem.quantity || 1,
          userId: user?.id.toString() || '',
          addedAt: new Date().toISOString()
        };
      } else {
        console.log('‚ùå No matching book found');
      }
    } catch (error) {
      console.error('‚ùå Error reading localStorage:', error);
    }

    // Fallback cu·ªëi c√πng
    console.log('‚ö†Ô∏è Creating fallback item');
    return {
      id: apiItem.id?.toString() || `temp_${Date.now()}`,
      productId: apiItem.productId || `unknown_${apiItem.id}`,
      name: 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh',
      price: 0,
      originalPrice: 0,
      quantity: apiItem.quantity || 1,
      userId: user?.id.toString() || '',
      addedAt: new Date().toISOString()
    };
  };

  // L·∫•y danh s√°ch cart t·ª´ API
  const refreshCart = async () => {
    console.log('üîÑ refreshCart called');
    console.log('üîÑ isAuthenticated:', isAuthenticated);
    console.log('üîÑ user:', user);
    
    if (!isAuthenticated || !user) {
      console.log('üö´ Not authenticated, clearing cart');
      setItems([]);
      return;
    }

    setLoading(true);
    try {
      console.log('üîÑ Refreshing cart for user:', user.id);
      console.log('üîÑ Calling cartsApi.getAll with userId:', user.id.toString());
      
      const response = await cartsApi.getAll(user.id.toString());
      console.log('üì¶ Raw API response for user', user.id, ':', response);
      console.log('üì¶ Response is array:', Array.isArray(response));
      console.log('üì¶ Response length:', response?.length);

      if (Array.isArray(response)) {
        console.log('üîÑ Converting', response.length, 'items');
        const cartItems = response.map((item, index) => {
          console.log(`üîÑ Converting item ${index + 1}:`, item);
          const converted = convertApiToCartItem(item);
          console.log(`‚úÖ Converted item ${index + 1}:`, converted);
          return converted;
        });
        
        setItems(cartItems);
        console.log('‚úÖ Final cart loaded for user', user.id, ':', cartItems);
      } else {
        console.log('‚ùå Invalid API response format');
        setItems([]);
      }
    } catch (error) {
      console.error('‚ùå Error loading cart:', error);
      setItems([]);
    } finally {
      setLoading(false);
    }
  };

  // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  const addToCart = async (product: Omit<CartItem, 'id' | 'quantity' | 'userId' | 'addedAt'>, quantity: number = 1) => {
    if (!isAuthenticated || !user) {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng');
      return;
    }

    setLoading(true);
    try {
      console.log('üõí Adding to cart:', product, 'quantity:', quantity);

      // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
      const existingItem = items.find(item => item.productId === product.productId);
      
      if (existingItem) {
        // C·∫≠p nh·∫≠t quantity v·ªõi s·ªë l∆∞·ª£ng m·ªõi
        await updateQuantity(existingItem.id, existingItem.quantity + quantity);
      } else {
        // Th√™m s·∫£n ph·∫©m m·ªõi v·ªõi quantity ch·ªâ ƒë·ªãnh
        const cartData = {
          productId: product.productId,
          name: product.name,
          price: product.price,
          originalPrice: product.originalPrice || product.price,
          image: product.image || '',
          description: product.description || '',
          category: product.category || '',
          brand: product.brand || '',
          quantity: quantity,
          userId: user.id.toString(),
          addedAt: new Date().toISOString()
        };

        console.log('üì§ Sending to API:', cartData);
        const newItem = await cartsApi.add(cartData);
        console.log('‚úÖ API response:', newItem);

        // L∆∞u backup v√†o localStorage
        const completeItem: CartItem = {
          id: newItem.id?.toString() || `temp_${Date.now()}`,
          ...cartData
        };

        const backup = [...items, completeItem];
        localStorage.setItem(`cart_backup_${user.id}`, JSON.stringify(backup));
        console.log('üíæ Saved backup to localStorage');

        // Refresh cart
        await refreshCart();
      }

      console.log('‚úÖ Product added to cart successfully');
    } catch (error) {
      console.error('‚ùå Error adding to cart:', error);
      alert('C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng');
    } finally {
      setLoading(false);
    }
  };

  // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeFromCart = async (id: string) => {
    const originalItems = [...items]; // Backup ƒë·ªÉ restore n·∫øu l·ªói
    
    try {
      console.log('üóëÔ∏è Removing from cart:', id);
      
      // C·∫≠p nh·∫≠t local state tr∆∞·ªõc
      const updatedItems = items.filter(item => item.id !== id);
      setItems(updatedItems);
      
      // C·∫≠p nh·∫≠t localStorage backup
      if (user?.id) {
        localStorage.setItem(`cart_backup_${user.id}`, JSON.stringify(updatedItems));
      }
      
      // G·ªçi API ƒë·ªÉ sync v·ªõi server
      await cartsApi.remove(id);
      
      console.log('‚úÖ Product removed from cart');
    } catch (error) {
      console.error('‚ùå Error removing from cart:', error);
      
      // N·∫øu API l·ªói, kh√¥i ph·ª•c l·∫°i state c≈©
      setItems(originalItems);
      if (user?.id) {
        localStorage.setItem(`cart_backup_${user.id}`, JSON.stringify(originalItems));
      }
      
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m');
    }
  };

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const updateQuantity = async (id: string, quantity: number) => {
    if (quantity <= 0) {
      await removeFromCart(id);
      return;
    }

    const originalItems = [...items]; // Backup ƒë·ªÉ restore n·∫øu l·ªói
    
    try {
      console.log('üîÑ Updating quantity:', { id, quantity });
      
      // T√¨m item hi·ªán t·∫°i ƒë·ªÉ l·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin
      const currentItem = items.find(item => item.id === id);
      if (!currentItem) {
        throw new Error('Item not found');
      }
      
      // C·∫≠p nh·∫≠t local state tr∆∞·ªõc ƒë·ªÉ UI responsive
      const updatedItems = items.map(item => 
        item.id === id ? { ...item, quantity } : item
      );
      setItems(updatedItems);
      
      // C·∫≠p nh·∫≠t localStorage backup
      if (user?.id) {
        localStorage.setItem(`cart_backup_${user.id}`, JSON.stringify(updatedItems));
      }
      
      // G·ª≠i ƒë·∫ßy ƒë·ªß th√¥ng tin l√™n API, kh√¥ng ch·ªâ quantity
      const fullUpdateData = {
        productId: currentItem.productId,
        name: currentItem.name,
        price: currentItem.price,
        originalPrice: currentItem.originalPrice,
        image: currentItem.image,
        description: currentItem.description,
        category: currentItem.category,
        brand: currentItem.brand,
        quantity: quantity, // quantity m·ªõi
        userId: user?.id.toString() || '',
        addedAt: currentItem.addedAt
      };
      
      console.log('üì§ Sending full data to API:', fullUpdateData);
      await cartsApi.update(id, fullUpdateData);
      
      console.log('‚úÖ Quantity updated successfully');
    } catch (error) {
      console.error('‚ùå Error updating quantity:', error);
      
      // N·∫øu API l·ªói, kh√¥i ph·ª•c l·∫°i state c≈©
      setItems(originalItems);
      if (user?.id) {
        localStorage.setItem(`cart_backup_${user.id}`, JSON.stringify(originalItems));
      }
      
      alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng');
    }
  };

  // X√≥a to√†n b·ªô gi·ªè h√†ng
  const clearCart = async () => {
    setLoading(true);
    try {
      console.log('üßπ Clearing cart');
      
      // X√≥a t·ª´ng item
      const deletePromises = items.map(item => cartsApi.remove(item.id));
      await Promise.all(deletePromises);
      
      // X√≥a backup
      if (user?.id) {
        localStorage.removeItem(`cart_backup_${user.id}`);
      }
      
      setItems([]);
      console.log('‚úÖ Cart cleared');
    } catch (error) {
      console.error('‚ùå Error clearing cart:', error);
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a gi·ªè h√†ng');
    } finally {
      setLoading(false);
    }
  };

  // Load cart khi user login
  useEffect(() => {
    console.log('üîÑ User changed:', { isAuthenticated, userId: user?.id });
    
    if (isAuthenticated && user) {
      console.log('üë§ Loading cart for user:', user.id);
      refreshCart();
    } else {
      console.log('üö´ User not authenticated, clearing cart');
      setItems([]);
      
      // Clear all localStorage backup khi logout
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('cart_backup_')) {
          console.log('üßπ Clearing localStorage:', key);
          localStorage.removeItem(key);
        }
      });
    }
  }, [isAuthenticated, user?.id]);

  const value: CartContextType = {
    items,
    totalItems,
    totalPrice,
    loading,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    refreshCart
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

export default CartProvider;
